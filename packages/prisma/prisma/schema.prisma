datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  output        = "../client"
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

generator zod {
  provider = "zod-prisma"
  output   = "../../common/src/models" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          String     @default("user")

  @@index(id, type: Hash)
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id              Int      @id @default(autoincrement())
  title           String
  completed       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  creationLatency Float?

  @@index([id, createdAt, updatedAt, createdBy])
  @@map("todos")
}
